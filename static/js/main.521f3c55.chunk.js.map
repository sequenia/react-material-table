{"version":3,"sources":["../../src/table_header.js","../../src/cells/text_cell.js","../../src/cells/enum_cell.js","../../src/cells/date_time_cell.js","../../src/cells/model_cell.js","../../src/cells/boolean_cell.js","../../src/table_row.js","../../src/table_view.js","App.js","index.js"],"names":["constructor","this","state","allSelected","nextState","JSON","onChangeSort","filterData","orderColumn","newOrderType","column","orderType","newOrderColumn","className","columns","clsx","classes","allowSelection","padding","checked","color","indeterminate","onChange","onChangeAllSelection","cell","columnName","active","direction","onClick","key","sortDirection","props","React","withStyles","theme","display","editable","value","format","formatter","root","data","item","result","rawValue","enumValue","values","label","timeFormat","dateFormat","date","moment","DateTimeCell","formattedDate","formattedTime","serverDateTimeFormat","dateValue","utcOffset","serverDateFormat","formattedTine","event","displayValue","model","content","noText","BooleanCell","yesText","PropTypes","string","onChangeItem","nextProps","prevProps","wrapperLinkForCell","component","onChangeColumn","hoverable","selected","hover","onChangeSelection","cursor","index","items","inner","header","children","Boolean","onClickRow","TableView","bool","nameContainer","alignItems","actions","justifyContent","statusEnum","workersItems","id","busy","name","status","company","searchEnginesItems","founded","link","WorkersTableModel","displayName","type","sortKey","renderFunction","alert","DescribingModel","SearchEnginesTableModel","WorkersTableModelInstance","SearchEnginesTableModelInstance","App","useState","setItems","setFilterData","useEffect","listCells","sortedItems","slice","sort","a","b","localeCompare","href","target","rel","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.521f3c55.chunk.js","sourcesContent":["import React from 'react'\nimport clsx from 'clsx'\nimport { withStyles } from '@material-ui/styles'\nimport {\n  Checkbox,\n  TableCell,\n  TableHead,\n  TableRow as MaterialTableRow,\n  TableSortLabel\n} from '@material-ui/core'\n\nconst styles = (theme) => ({\n  columnName: {\n    display: 'block'\n  }\n})\n\nclass TableHeader extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {}\n\n    this.onChangeSort = this.onChangeSort.bind(this)\n    this.onChangeAllSelection = this.onChangeAllSelection.bind(this)\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return {\n      allSelected: props.allSelected,\n      columns: [...props.columns],\n      filterData: {\n        ...state.filterData,\n        ...props.filterData\n      }\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return (\n      this.state.allSelected !== nextState.allSelected ||\n      JSON.stringify(this.state.columns) !==\n        JSON.stringify(nextState.columns) ||\n      JSON.stringify(this.state.filterData) !==\n        JSON.stringify(nextState.filterData)\n    )\n  }\n\n  onChangeAllSelection(value) {}\n\n  onChangeSort(column) {\n    const { onChangeSort } = this.props\n    const { filterData } = this.state\n    const { orderType, orderColumn } = filterData\n\n    let newOrderColumn\n    let newOrderType = 'asc'\n\n    if (column.sortKey === orderColumn) {\n      newOrderType = orderType === 'asc' ? 'desc' : 'asc'\n    }\n    // eslint-disable-next-line prefer-const\n    newOrderColumn = column.sortKey\n\n    if (onChangeSort) {\n      onChangeSort(newOrderColumn, newOrderType)\n    }\n  }\n\n  render() {\n    const { allowSelection, classes, className } = this.props\n\n    const { allSelected, columns } = this.state\n\n    if (columns.length === 0) {\n      return <React.Fragment />\n    }\n\n    return (\n      <TableHead className={clsx(classes.root, className)}>\n        <MaterialTableRow>\n          {allowSelection && (\n            <TableCell padding='checkbox'>\n              <Checkbox\n                checked={allSelected}\n                color='primary'\n                indeterminate={!allSelected}\n                onChange={this.onChangeAllSelection}\n              />\n            </TableCell>\n          )}\n          {columns.map((column) => {\n            return this.headerContent(column)\n          })}\n        </MaterialTableRow>\n      </TableHead>\n    )\n  }\n\n  headerContent(column) {\n    const { classes } = this.props\n\n    const { filterData } = this.state\n    const { orderType, orderColumn } = filterData\n\n    let cell = <span className={classes.columnName}>{column.displayName}</span>\n\n    if (column.sortKey) {\n      cell = (\n        <TableSortLabel\n          active={column.sortKey === orderColumn}\n          direction={column.sortKey === orderColumn ? orderType : 'asc'}\n          onClick={() => this.onChangeSort(column)}\n        >\n          {cell}\n        </TableSortLabel>\n      )\n    }\n\n    return (\n      <TableCell\n        key={column.name}\n        sortDirection={\n          column.sortKey === orderColumn && column.sortKey ? orderType : false\n        }\n      >\n        {cell}\n      </TableCell>\n    )\n  }\n}\n\nexport default withStyles(styles)(TableHeader)\n","import React from 'react';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/styles';\n\nconst styles = theme => ({\n  root: {}\n});\n\nclass TextCell extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n\n    }\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    let { value } = props;\n    if(value) {\n      value = `${value}`.trim();\n    }\n\n    return {\n      editable: props.editable,\n      value: value,\n      column: props.column\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.state.editable !== nextState.editable ||\n           this.state.value !== nextState.value ||\n           JSON.stringify(this.state.column) !== nextState.column;\n  }\n\n  render() {\n    const { classes, className } = this.props;\n    const { value, column } = this.state;\n    const { formatter, format } = column;\n\n    if(!column) {\n      return <React.Fragment />\n    }\n\n    return <div className = { clsx(classes.root, className) } >\n      {\n        (!value || value === \"\") &&\n        <React.Fragment>\n          { \"-\" }\n        </React.Fragment>\n      }\n      {\n        value && value !== \"\" &&\n        <React.Fragment>\n          { formatter ? formatter.format(value, format) : value }\n        </React.Fragment>\n      }\n    </div >\n  }\n}\n\nexport default withStyles(styles)(TextCell);","import React from 'react'\nimport clsx from 'clsx'\nimport { withStyles } from '@material-ui/styles'\n\nconst styles = (theme) => ({\n  root: {}\n})\n\nclass EnumCell extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {}\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return {\n      editable: props.editable,\n      value: props.value,\n      column: props.column\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return (\n      this.state.editable !== nextState.editable ||\n      this.state.value !== nextState.value ||\n      JSON.stringify(this.state.column) !== nextState.column\n    )\n  }\n\n  rawValues() {\n    const { column } = this.state\n    const { data } = column\n    const values = data.map((item) => {\n      return item.value\n    })\n    return values\n  }\n\n  values() {\n    const { column } = this.state\n    const { data } = column\n    const result = {}\n    this.rawValues().forEach((rawValue, index) => {\n      result[rawValue] = {\n        key: data[index].key,\n        value: rawValue\n      }\n    })\n    return result\n  }\n\n  label(value) {\n    if (!value) {\n      return '-'\n    }\n    const enumValue = this.values()[value]\n    if (!enumValue) {\n      return '-'\n    }\n    return enumValue.key\n  }\n\n  render() {\n    const { classes, className } = this.props\n    const { value, column } = this.state\n\n    if (!column) {\n      return <React.Fragment />\n    }\n\n    if (!column.data) {\n      return <React.Fragment />\n    }\n\n    return (\n      <div className={clsx(classes.root, className)}>{this.label(value)}</div>\n    )\n  }\n}\n\nexport default withStyles(styles)(EnumCell)\n","import React from 'react'\nimport clsx from 'clsx'\nimport { withStyles } from '@material-ui/styles'\nimport moment from 'moment'\n\nconst styles = (theme) => ({\n  root: {},\n  formattedDate: {},\n  formattedTine: {}\n})\n\nclass DateTimeCell extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {}\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    let { value } = props\n    if (value) {\n      value = `${value}`.trim()\n    }\n    return {\n      editable: props.editable,\n      value: value,\n      column: props.column\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return (\n      this.state.editable !== nextState.editable ||\n      this.state.value !== nextState.value ||\n      JSON.stringify(this.state.column) !== nextState.column\n    )\n  }\n\n  render() {\n    const { classes, className } = this.props\n    const { value, column } = this.state\n\n    if (!column) {\n      return <React.Fragment />\n    }\n\n    const { dateFormat, timeFormat } = column\n\n    if (!value || value === '' || (!dateFormat && !timeFormat)) {\n      return <div className={clsx(classes.root, className)}>-</div>\n    }\n\n    const date = moment.utc(DateTimeCell.addOffset(value, this.props))\n\n    return (\n      <div className={clsx(classes.root, className)}>\n        {dateFormat && (\n          <div className={classes.formattedDate}>{date.format(dateFormat)}</div>\n        )}\n        {timeFormat && (\n          <div className={classes.formattedTime}>{date.format(timeFormat)}</div>\n        )}\n      </div>\n    )\n  }\n\n  static addOffset(value, props) {\n    if (!value) {\n      return value\n    }\n\n    const {\n      column: { timeFormat },\n      utcOffset,\n      serverDateFormat,\n      serverDateTimeFormat\n    } = props\n\n    if (!timeFormat) {\n      return moment(value).format(serverDateFormat)\n    }\n    let dateValue = moment.utc(value)\n    dateValue = dateValue.hours(dateValue.hours() + utcOffset)\n\n    return dateValue.format(serverDateTimeFormat)\n  }\n\n  static subtractOffset(value, props) {\n    if (!value) {\n      return value\n    }\n\n    const {\n      column: { timeFormat },\n      utcOffset,\n      serverDateFormat,\n      serverDateTimeFormat\n    } = props\n\n    if (!timeFormat) {\n      return value.format(serverDateFormat)\n    }\n\n    const dateValue = value.hours(value.hours() - utcOffset)\n    return dateValue.format(serverDateTimeFormat)\n  }\n}\n\nDateTimeCell.defaultProps = {\n  utcOffset: 0,\n  serverDateFormat: 'YYYY-MM-DD',\n  serverDateTimeFormat: 'YYYY-MM-DDTHH:mm:ss'\n}\n\nexport default withStyles(styles)(DateTimeCell)\n","import React from 'react'\nimport clsx from 'clsx'\nimport { withStyles } from '@material-ui/styles'\n\nconst styles = (theme) => ({\n  root: {}\n})\n\nclass ModelCell extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {}\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const { value } = props\n\n    return {\n      editable: props.editable,\n      value: value,\n      column: props.column\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return (\n      this.state.editable !== nextState.editable ||\n      JSON.stringify(this.state.value) !== JSON.stringify(nextState.value) ||\n      JSON.stringify(this.state.column) !== nextState.column\n    )\n  }\n\n  onClick = (event) => {\n    event.stopPropagation()\n  }\n\n  content() {\n    const { value, column } = this.state\n    const { model } = column\n\n    const displayValue = model.displayValue(value)\n    if (!displayValue || displayValue === '') {\n      return <React.Fragment>-</React.Fragment>\n    }\n    const content = <React.Fragment>{displayValue}</React.Fragment>\n    return content\n  }\n\n  render() {\n    const { classes, className } = this.props\n    const { column } = this.state\n\n    const { model } = column\n\n    if (!column) {\n      return <React.Fragment />\n    }\n\n    if (!model) {\n      return <React.Fragment />\n    }\n\n    return <div className={clsx(classes.root, className)}>{this.content()}</div>\n  }\n}\n\nexport default withStyles(styles)(ModelCell)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { withStyles } from '@material-ui/styles'\n\nconst styles = (theme) => ({\n  root: {}\n})\n\nclass BooleanCell extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {}\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const { value } = props\n\n    return {\n      editable: props.editable,\n      value: value,\n      column: props.column\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return (\n      this.state.editable !== nextState.editable ||\n      this.state.value !== nextState.value ||\n      JSON.stringify(this.state.column) !== nextState.column\n    )\n  }\n\n  render() {\n    const { classes, className, yesText, noText } = this.props\n    const { value, column } = this.state\n\n    if (!column) {\n      return <React.Fragment />\n    }\n\n    return (\n      <div className={clsx(classes.root, className)}>\n        {value && <React.Fragment>{yesText}</React.Fragment>}\n        {!value && <React.Fragment>{noText}</React.Fragment>}\n      </div>\n    )\n  }\n}\n\nBooleanCell.propTypes = {\n  yesText: PropTypes.string,\n  noText: PropTypes.string\n}\n\nBooleanCell.defaultProps = {\n  yesText: 'Yes',\n  noText: 'No'\n}\n\nexport default withStyles(styles)(BooleanCell)\n","import React from 'react'\nimport clsx from 'clsx'\nimport { withStyles } from '@material-ui/styles'\nimport {\n  Checkbox,\n  TableRow as MaterialTableRow,\n  TableCell\n} from '@material-ui/core'\n\nimport TextCell from './cells/text_cell.js'\nimport EnumCell from './cells/enum_cell.js'\nimport DateTimeCell from './cells/date_time_cell.js'\nimport ModelCell from './cells/model_cell.js'\nimport BooleanCell from './cells/boolean_cell.js'\n\nconst styles = (theme) => ({\n  root: {},\n  cell: {},\n  hoverable: {\n    cursor: 'pointer'\n  }\n})\n\nclass TableRow extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.item = { ...{}, ...props.item }\n\n    this.state = {}\n\n    this.onChangeSelection = this.onChangeSelection.bind(this)\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return {\n      columns: [...props.columns]\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return (\n      JSON.stringify(this.state.columns) !==\n        JSON.stringify(nextState.columns) ||\n      JSON.stringify(this.item) !== JSON.stringify(nextProps.item)\n    )\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (JSON.stringify(this.item) !== JSON.stringify(prevProps.item)) {\n      this.item = { ...this.props.item }\n      this.forceUpdate()\n    }\n  }\n\n  onChangeSelection(value) {}\n\n  onChangeColumn = (column, newValue) => {\n    const { onChangeItem } = this.props\n    this.item[column.name] = newValue\n    if (onChangeItem) {\n      onChangeItem({ ...this.item }, column)\n    }\n  }\n\n  onClick = () => {\n    const { onClick } = this.props\n    if (onClick) {\n      onClick(this.item)\n    }\n  }\n\n  cellContent(column) {\n    const { item } = this\n    const { wrapperLinkForCell } = this.props;\n\n    const value = item[column.name]\n\n    let component = <React.Fragment />\n    if (column.renderFunction) {\n      component = column.renderFunction(item, column, this.onChangeColumn)\n    }\n    if (column.type === 'enum') {\n      component = (\n        <EnumCell\n          column={column}\n          value={value}\n          onChange={this.onChangeColumn}\n        />\n      )\n    }\n    if (column.type === 'text') {\n      component = (\n        <TextCell\n          column={column}\n          value={value}\n          onChange={this.onChangeColumn}\n        />\n      )\n    }\n    if (column.type === 'dateTime') {\n      component = (\n        <DateTimeCell\n          column={column}\n          value={value}\n          onChange={this.onChangeColumn}\n        />\n      )\n    }\n    if (column.type === 'model') {\n      component = (\n        <ModelCell\n          column={column}\n          value={value}\n          onChange={this.onChangeColumn}\n        />\n      )\n    }\n    if (column.type === 'boolean') {\n      component = (\n        <BooleanCell\n          column={column}\n          value={value}\n          onChange={this.onChangeColumn}\n        />\n      )\n    }\n    if(wrapperLinkForCell) {\n      return wrapperLinkForCell(item, component);\n    }\n    return component\n  }\n\n  render() {\n    const { allowSelection, classes, className, hoverable } = this.props\n\n    const { columns } = this.state\n\n    const { item } = this\n    const { selected } = item\n\n    if (columns.length === 0) {\n      return <React.Fragment />\n    }\n\n    return (\n      <MaterialTableRow\n        className={clsx({\n          [classes.root]: true,\n          [classes.hoverable]: hoverable,\n          [className]: true\n        })}\n        hover={hoverable}\n        selected={selected}\n        onClick={this.onClick}\n      >\n        {allowSelection && (\n          <TableCell padding='checkbox'>\n            <Checkbox\n              checked={selected}\n              color='primary'\n              indeterminate={!selected}\n              onChange={this.onChangeSelection}\n            />\n          </TableCell>\n        )}\n        {columns.map((column) => {\n          const content = this.cellContent(column)\n          return (\n            <TableCell key={column.name} className={classes.cell}>\n              {content}\n            </TableCell>\n          )\n        })}\n      </MaterialTableRow>\n    )\n  }\n}\n\nexport default withStyles(styles)(TableRow)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { withStyles } from '@material-ui/styles'\nimport { Card, CardContent, Table, TableBody } from '@material-ui/core'\n\nimport TableHeader from './table_header.js'\nimport TableRow from './table_row.js'\n\nconst styles = (theme) => ({\n  root: {},\n  content: {\n    padding: 0\n  },\n  nameContainer: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  actions: {\n    justifyContent: 'flex-end'\n  }\n})\n\nclass TableView extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {}\n\n    this.onChangeAllSelection = this.onChangeAllSelection.bind(this)\n    this.onChangeSelection = this.onChangeSelection.bind(this)\n    this.onChangeSort = this.onChangeSort.bind(this)\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return {\n      filterData: { ...props.filterData },\n      columns: [...props.columns],\n      allSelected: props.allSelected\n    }\n  }\n\n  onChangeAllSelection(value) {}\n\n  onChangeSelection(item, value) {}\n\n  onChangeSort(orderColumn, orderType) {\n    const { onChangeSort } = this.props\n    if (onChangeSort) {\n      onChangeSort(orderColumn, orderType)\n    }\n  }\n\n  onChangeItem = (item, index, changedColumn) => {\n    const { onChangeItem } = this.props\n    if (onChangeItem) {\n      onChangeItem(item, index, changedColumn)\n    }\n  }\n\n  render() {\n    const {\n      allowSelection,\n      classes,\n      className,\n      onClickRow,\n      wrapperLinkForCell\n    } = this.props\n    const { header, children, items } = this.props\n\n    const { columns, allSelected, filterData } = this.state\n\n    if (columns.length === 0) {\n      return <React.Fragment />\n    }\n    return (\n      <Card className={clsx(classes.root, className)}>\n        <CardContent className={classes.content}>\n          <PerfectScrollbar>\n            <div className={classes.inner}>\n              <Table>\n                {header}\n                {!header && (\n                  <TableHeader\n                    columns={columns}\n                    allSelected={allSelected}\n                    filterData={filterData}\n                    allowSelection={allowSelection}\n                    onChangeAllSelection={this.onChangeAllSelection}\n                    onChangeSort={this.onChangeSort}\n                  />\n                )}\n                <TableBody>\n                  {children}\n                  {!children && (\n                    <React.Fragment>\n                      {items.map((item, index) => {\n                        return (\n                          <TableRow\n                            key={item.key || index}\n                            columns={columns}\n                            allowSelection={allowSelection}\n                            item={item}\n                            onChangeSelection={(value) =>\n                              this.onChangeAllSelection(item, value)\n                            }\n                            onChangeItem={(item, column) =>\n                              this.onChangeItem(item, index, column)\n                            }\n                            hoverable={\n                              Boolean(wrapperLinkForCell) || Boolean(onClickRow)\n                            }\n                            onClick={(item) => {\n                              if (onClickRow) onClickRow(item, index)\n                            }}\n                            wrapperLinkForCell={wrapperLinkForCell}\n                          />\n                        )\n                      })}\n                    </React.Fragment>\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          </PerfectScrollbar>\n        </CardContent>\n      </Card>\n    )\n  }\n}\n\nTableView.propTypes = {\n  columns: PropTypes.array.isRequired,\n  items: PropTypes.array.isRequired,\n  filterData: PropTypes.object,\n  onChangeSort: PropTypes.func,\n  onClickRow: PropTypes.func,\n  onChangeItem: PropTypes.func,\n  header: PropTypes.node,\n  allSelected: PropTypes.bool,\n  allowSelection: PropTypes.bool\n}\n\nTableView.defaultProps = {\n  allSelected: false,\n  allowSelection: false\n}\n\nexport default withStyles(styles)(TableView)\n","import React, { useEffect, useState } from 'react'\nimport './index.css'\n\nimport TableView from '@sequenia/react-material-table'\nimport DescribingModel from '@sequenia/describing-model';\n\nconst statusEnum = [\n  {\n    key: \"At work\",\n    value: \"working\"\n  },\n  {\n    key: \"On vacation\",\n    value: \"vacation\"\n  }  \n];\n\nconst workersItems = [\n  {\n    id: 1,\n    key: 1,\n    busy: true,\n    date: \"2013-02-20T08:01:16.214Z\",\n    name: \"John Doe\",\n    status: \"working\",\n    company: \"Company #1\"\n  },\n  {\n    id: 2,\n    key: 2,\n    busy: false,\n    date: \"2006-12-12T18:23:01.214Z\",\n    name: \"Ken Block\",\n    status: \"working\",\n    company: \"Company #2\",\n  },\n  {\n    id: 3,\n    key: 3,\n    busy: false,\n    date: \"2016-07-12T08:13:01.214Z\",\n    name: \"Max Payne\",\n    status: \"working\",\n    company: \"Company #3\",\n  },\n  {\n    id: 4,\n    key: 4,\n    busy: true,\n    date: \"2020-04-02T08:21:26.214Z\",\n    name: \"Johny Bravo\",\n    status: \"vacation\",\n    company: \"Company #4\",\n  },\n  { \n    id: 5,\n    key: 5,\n    busy: false,\n    date: \"2001-11-23T08:01:26.214Z\",\n    name: \"Homer Simpson\",\n    status: \"vacation\",\n    company: \"Company #5\",\n  },\n];\n\nconst searchEnginesItems = [\n  {\n    name: \"Google\",\n    founded: \"04.09.1998\",\n    link: \"http://www.google.com/\"\n  },\n  {\n    name: \"Baidu\",\n    founded: \"01.01.2000\",\n    link: \"http://www.baidu.com/\"\n  },\n  {\n    name: \"Yahoo\",\n    founded: \"02.02.1995\",\n    link: \"http://www.yahoo.com/\"\n  }\n]\n\nclass WorkersTableModel extends DescribingModel {\n \n  listCells(items = undefined) {\n    return [\n      {\n        name: \"name\",\n        displayName: \"Name\",\n        type: \"text\"\n      },\n      {\n        name: \"date\",\n        displayName: \"Date\",\n        dateFormat: \"DD.MM.YYYY\",\n        timeFormat: \"HH:mm\",\n        type: \"dateTime\",\n        sortKey: \"date\"\n      },\n      {\n        name: \"status\",\n        displayName: \"Status\",\n        type: \"enum\",\n        data: statusEnum,\n        sortKey: \"status\"\n      },\n      {\n        name: \"company\",\n        displayName: \"Company\",\n        type: \"text\",\n        sortKey: \"company\"\n      },\n      {\n        name: \"busy\",\n        displayName: \"Busy\",\n        type: \"boolean\",\n        sortKey: \"busy\"\n      },\n      {\n        name: \"clickToAlert\",\n        displayName: \"Click to alert\",\n        renderFunction: item => {\n          return <button onClick = { () => alert(`Wake up, ${item.name}!`) }>\n            Click to Alert\n          </button>\n        }\n      }\n    ]\n  }\n}\n\nclass SearchEnginesTableModel extends DescribingModel {\n\n  listCells(items = undefined) {\n    return [\n      {\n        name: \"name\",\n        displayName: \"Name\",\n        type: \"text\"\n      },\n      {\n        name: \"founded\",\n        displayName: \"Founded\",\n        dateFormat: \"DD.MM.YYYY\",\n        type: \"dateTime\"\n      },\n      {\n        name: \"link\",\n        displayName: \"Link\",\n        type: \"text\"\n      }\n    ]\n  }\n}\n\nconst WorkersTableModelInstance = new WorkersTableModel();\nconst SearchEnginesTableModelInstance = new SearchEnginesTableModel();\n\nconst App = () => {\n  const [items, setItems] = useState(workersItems);\n  const [filterData, setFilterData] = useState({});\n\n  useEffect(() => {\n      setItems(items);\n    }, [items]\n) ;\n\n  const onChangeSort = (orderColumn, orderType) => {\n    let sortedItems\n    \n    if (orderType === \"asc\") {\n      sortedItems = items.slice().sort((a, b) => {\n        return ('' + a[orderColumn]).localeCompare(b[orderColumn]);\n      });\n    }\n    if (orderType === \"desc\") {\n      sortedItems = items.slice().sort((a, b) => {\n        return ('' + b[orderColumn]).localeCompare(a[orderColumn]);\n      });\n    }\n    setItems(sortedItems);\n    setFilterData({ orderColumn, orderType })\n  }\n\n  return <div className = \"container\">\n    <h1>React Material Table</h1>\n    <p>Custom table with sorting</p>\n    <section className = \"section\"> \n      <h3>Table with sorting</h3>\n      <TableView columns = { WorkersTableModelInstance.listCells() } \n                 items = { items }\n                 filterData = { filterData }\n                 onChangeSort = { onChangeSort }/>\n    </section>\n    <section className = \"section\">\n    <h3>Table with clickable row</h3>\n      <TableView columns = { SearchEnginesTableModelInstance.listCells() }\n                 items = { searchEnginesItems } \n                 wrapperLinkForCell = { (item, cell) => {\n                 return <a href = { `${item.link}`}\n                           target = \"_blank\" \n                           rel = \"noopener noreferrer\">\n                  { cell }\n                 </a>\n                 } }/>\n    </section>                \n  </div>\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}